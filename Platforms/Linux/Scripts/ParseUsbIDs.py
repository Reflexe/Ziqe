#!/usr/bin/env python
# -*- coding: utf-8 -*-

def createIDFile(l, output, input_name):
    output.write('/* Generated by Linux/Scripts/ParseUsbIDs.py by {}. DO NOT EDIT */\n'.format(input_name))
    output.write('static struct usb_device_id driver_usb_table[] = { \n')

    if len(l) == 0:
        output.write('};\n')
        return

    for element in l:
        if not isinstance (element, str):
            raise TypeError ('Invalid element type: {} instead of str'.format(str(type(element))))

        if len (element) != 8:
            raise ValueError ('Invalid element length: {}'.format(len(element)))

        try:
            int (element, 16)
        except ValueError:
            raise ValueError ('Invalid ID: {}'.format(element))

        output.write('  {{ USB_DEVICE(0x{}, 0x{}) }},\n'.format (element[0:4], element[4:8]))


    output.write('  {} /* Terminating entry */\n'
                 '};\n')
    output.write('MODULE_DEVICE_TABLE (usb, driver_usb_table);\n')

def main(args):
    import json

    obj = json.load (args.input)
    args.input.close()

    if isinstance(obj, list) is False:
        raise ValueError('Invalid file type: {} instead of list'.format(str(type(obj))))

    createIDFile (obj, args.output, args.input.name)
    args.output.close()

if __name__ == '__main__':
    import argparse
    from sys import stdout

    parser = argparse.ArgumentParser()

    parser.add_argument ('input', type=argparse.FileType('r'))
    parser.add_argument ('output', type=argparse.FileType('w+'))

    main (parser.parse_args ())
